'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SandboxCollection = require('./SandboxCollection');

var SandboxLanes = function (_SandboxCollection) {
    _inherits(SandboxLanes, _SandboxCollection);

    function SandboxLanes() {
        _classCallCheck(this, SandboxLanes);

        return _possibleConstructorReturn(this, (SandboxLanes.__proto__ || Object.getPrototypeOf(SandboxLanes)).apply(this, arguments));
    }

    _createClass(SandboxLanes, [{
        key: '_get',
        value: function _get(key) {
            if (this.extraArray.hasOwnProperty(key)) {
                return this.extraArray[key];
            } else if (!this.originalArray.hasOwnProperty(key)) {
                return undefined;
            } else {
                this.extraArray[key] = [];
                for (var i = 0; i < this.originalArray[key].length; i++) {
                    this.extraArray[key].push({
                        id: this.originalArray[key][i].id,
                        incident: this.originalArray[key][i].incident,
                        millisecond: this.originalArray[key][i].millisecond * 1
                    });
                }
                return this.extraArray[key];
            }
        }
    }]);

    return SandboxLanes;
}(SandboxCollection);

module.exports = SandboxLanes;