"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GlobalState = function () {
    function GlobalState() {
        _classCallCheck(this, GlobalState);

        /*
        Incidents table. It's a table that holds relations between incidents. The table 
        structure is as follows: [
            {
                uuid: the uuid of the incident
                id: the id of the incident as provided by the user
                parent_uuid: the incident's parent's uuid
                object: direct reference to the object
                path: [] a path from parent to parent. This path is been updated each time a search process runs following the 
                    path to the final parent.
            }
        ]
        */
        this.incidentsTable = [];

        /*
        In order for our GlobalState to serve the performance needs it's indented to some indexes are very necessary
        - rowsPerId: holds the rows of the table that have the specific incident id
        - rowsByUUID: holds a reference to the corresponding row of an Incident with specific UUID
        - rowsByParent: holds a reference to the rows that have direct parent a given UUID
        */
        this.rowsPerId = {};
        this.rowsByUUID = {};
        this.rowsByParent = {};
    }

    // called from MC when a new Group is been instantiated


    _createClass(GlobalState, [{
        key: "newGroup",
        value: function newGroup(incident) {
            var newEntry = {
                uuid: incident.uuid,
                id: incident.id,
                parent_uuid: null,
                object: incident,
                path: []
            };
            this.rowsByParent[incident.uuid] = [];
            this.rowsByUUID[incident.uuid] = newEntry;
            if (!this.rowsPerId.hasOwnProperty(incident.id)) {
                this.rowsPerId[incident.id] = [];
            }
            this.rowsPerId[incident.id].push(newEntry);
            this.incidentsTable.push(newEntry);
        }

        // called from MC when a new Incident is been added on a group

    }, {
        key: "newIncidentOnGroup",
        value: function newIncidentOnGroup(incident) {
            var newEntry = {
                uuid: incident.uuid,
                id: incident.id,
                parent_uuid: incident.parentSceneObject.uuid,
                object: incident,
                path: []
            };
            this.rowsByParent[incident.parentSceneObject.uuid].push(newEntry);
            this.rowsByUUID[incident.uuid] = newEntry;
            if (!this.rowsPerId.hasOwnProperty(incident.id)) {
                this.rowsPerId[incident.id] = [];
            }
            this.rowsPerId[incident.id].push(newEntry);
            this.incidentsTable.push(newEntry);
        }

        // called by MC when an Incident is been removed from a Group

    }, {
        key: "removeIncident",
        value: function removeIncident(inc_uui) {
            function recursiveDeleteIncident(uuid) {
                // marks the row as no relevant any more
                var id = this.rowsByUUID[uuid].id;
                this.rowsByUUID[uuid].uuid = undefined;
                this.rowsByUUID[uuid].object = undefined;

                for (var i = 0; i < this.rowsPerId[id].length; i++) {
                    if (this.rowsPerId[id][i].uuid === undefined) {
                        this.rowsPerId[id].splice(i, 1);
                        break;
                    }
                }

                for (var _i = 0; _i < this.rowsByParent[uuid].length; _i++) {
                    recursiveDeleteIncident(this.rowsByParent[uuid][_i]);
                }

                this.rowsByParent[uuid] = [];
            }

            recursiveDeleteIncident(inc_uui);
        }
    }, {
        key: "incidentExists",
        value: function incidentExists(groupid, incidentId) {}
    }, {
        key: "getIncidentById",
        value: function getIncidentById(group, incidentId) {}
    }]);

    return GlobalState;
}();

module.exports = GlobalState;