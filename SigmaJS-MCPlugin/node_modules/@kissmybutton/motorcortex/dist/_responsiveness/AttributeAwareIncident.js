'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Group = require('../_BaseClasses/Group');
var conf = require('../configuration/generalConf');
var Helper = require('../_coreUtils/Helper');
var helper = new Helper();

var AttributesAwareIncident = function (_Group) {
    _inherits(AttributesAwareIncident, _Group);

    function AttributesAwareIncident(incident) {
        _classCallCheck(this, AttributesAwareIncident);

        var _this = _possibleConstructorReturn(this, (AttributesAwareIncident.__proto__ || Object.getPrototypeOf(AttributesAwareIncident)).call(this, incident.attrs, incident.props));

        _this.setUp(incident);
        return _this;
    }

    _createClass(AttributesAwareIncident, [{
        key: 'setUp',
        value: function setUp(incident) {
            this.IncidentClass = incident.constructor;
            this.toPassToElementIncidents = {
                plugin_channel_class: incident.plugin_channel_class,
                mc_plugin_npm_name: incident.mc_plugin_npm_name
            };
            this.attributeIncidentsByAttribute = {};
            this.cleanProps = Object.assign({}, this.props);
            this.cleanAttrs = Object.assign({}, this.attrs);
            delete this.cleanProps.id;
            this.cleanAttrs.animatedAttrs = {};

            for (var attr in this.attrs.animatedAttrs) {
                this._createAttributeIncident(attr);
            }
        }

        /**
        * attribute groups
        Can have on their timeline:
        - An incident
        Canâ€™t have on their timeline:
        - A plain group
        - A dom group
        - Another attribute group
        */

    }, {
        key: '_prepareInicdentForAddition',
        value: function _prepareInicdentForAddition(incident) {
            if (!incident.hasIncidents) {
                // if it is not a group
                return incident;
            } else {
                helper.error("attribute groups can not accept groups on their timeline");
                return null;
            }
        }
    }, {
        key: '_createAttributeIncident',
        value: function _createAttributeIncident(attribute) {
            var propsToPass = Object.assign({}, this.cleanProps);
            var attrsToPass = Object.assign({}, this.cleanAttrs);
            attrsToPass.animatedAttrs = {};
            if (_typeof(this.attrs.animatedAttrs[attribute]) === 'object' && !Array.isArray(this.attrs.animatedAttrs[attribute])) {
                attrsToPass.animatedAttrs[attribute] = Object.assign({}, this.attrs.animatedAttrs[attribute]);
            } else if (_typeof(this.attrs.animatedAttrs[attribute]) === 'object' && Array.isArray(this.attrs.animatedAttrs[attribute])) {
                attrsToPass.animatedAttrs[attribute] = this.attrs.animatedAttrs[attribute].splice(0);
            } else {
                attrsToPass.animatedAttrs[attribute] = this.attrs.animatedAttrs[attribute];
            }

            propsToPass.id = this.id + '_' + attribute;
            propsToPass.autogeneratedID = true;

            var attributeIncident = new this.IncidentClass(attrsToPass, propsToPass);
            attributeIncident.plugin_channel_class = this.toPassToElementIncidents.plugin_channel_class;
            attributeIncident.mc_plugin_npm_name = this.toPassToElementIncidents.mc_plugin_npm_name;
            this.addIncident(attributeIncident, 0);
            this.attributeIncidentsByAttribute[attribute] = attributeIncident;
        }
    }, {
        key: 'attributesChange',
        value: function attributesChange(newAttrs) {
            for (var i = 0; i < this.incidents; i++) {
                // TODO execute attribute change by passing down the command
            }
        }
    }, {
        key: 'groupType',
        get: function get() {
            return "attribute";
        }
    }]);

    return AttributesAwareIncident;
}(Group);

module.exports = AttributesAwareIncident;