'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Group = require('../_BaseClasses/Group');
var conf = require('../configuration/generalConf');
var Helper = require('../_coreUtils/Helper');
var helper = new Helper();

var DOMAwareIncident = function (_Group) {
    _inherits(DOMAwareIncident, _Group);

    function DOMAwareIncident(incident) {
        _classCallCheck(this, DOMAwareIncident);

        var _this = _possibleConstructorReturn(this, (DOMAwareIncident.__proto__ || Object.getPrototypeOf(DOMAwareIncident)).call(this, incident.attrs, incident.props));

        _this.setUp(incident);
        return _this;
    }

    _createClass(DOMAwareIncident, [{
        key: 'setUp',


        // props must have the elements collection and the millisecond
        // id is also mandatory
        value: function setUp(incident) {
            this.originalIncident = incident;
            this.IncidentClass = incident.constructor;
            this.toPassToElementIncidents = {
                plugin_channel_class: incident.plugin_channel_class,
                mc_plugin_npm_name: incident.mc_plugin_npm_name
            };
            this.elementIncidentsByMCID = {};
            this.cleanProps = Object.assign({}, this.props);
            delete this.cleanProps.id;

            if (this.context) {
                var elements = Array.from(this.context.document.querySelectorAll(this.props.selector));
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    this._createElementIncident(element);
                }
            }
        }
    }, {
        key: 'systolDiastole',
        value: function systolDiastole(durationFraction) {
            _get(DOMAwareIncident.prototype.__proto__ || Object.getPrototypeOf(DOMAwareIncident.prototype), 'systolDiastole', this).call(this, durationFraction);
            this.originalIncident.props.duration *= durationFraction;
        }

        /**
         * dom groups
            Can have on their timeline:
            - An incident with no animatedAttrs 
            - An attribute group (this method should actually turn any incident with animatedAttrs to one)
            Canâ€™t have on their timeline:
            - A plain group
            - Another dom group
         */

    }, {
        key: '_prepareInicdentForAddition',
        value: function _prepareInicdentForAddition(incident) {
            if (!incident.attrs.hasOwnProperty('animatedAttrs') && !incident.hasIncidents) {
                // if the incident is not a group and it has no animatedAttrs proceed normally
                return incident;
            } else if (incident.groupType === "plain") {
                // if the Incident is a plain group proceed normally
                helper.error("dom groups can not accept plain groups on their timeline");
                return null;
            } else if (incident.groupType === "dom") {
                helper.error("dom groups can not accept other dom groups on their timeline");
                return null;
            }

            // We need to turn the Incident to an AttrsAwareIncident
            // before adding it to the group
            var AttrsAwareIncident = require('./AttributeAwareIncident');
            var theAttrsAwareIncident = new AttrsAwareIncident(incident);
            return theAttrsAwareIncident;
        }
    }, {
        key: '_createElementIncident',
        value: function _createElementIncident(element) {
            var mcid = this.context.getMCID(element);
            if (!mcid) {
                mcid = helper.getAnId(true);
                this.context.setMCID(element, mcid);
            }

            var propsToPass = Object.assign({}, this.cleanProps);
            propsToPass.selector = this.context.getElementSelectorByMCID(mcid); // '[data-motorocortext2-id="mcid1"]' querySelectorAll()
            propsToPass.mcid = mcid;
            propsToPass.id = this.id + '_' + mcid;
            propsToPass.autogeneratedID = true;
            var elementIncident = new this.IncidentClass(this.attrs, propsToPass);
            elementIncident.plugin_channel_class = this.toPassToElementIncidents.plugin_channel_class;
            elementIncident.mc_plugin_npm_name = this.toPassToElementIncidents.mc_plugin_npm_name;
            var result = this.addIncident(elementIncident, 0);
            if (result.result === true) {
                this.elementIncidentsByMCID[mcid] = elementIncident;
            }
            return result;
        }

        /**
         * flashDOM method expects the new elements collection and:
         * 1. Identifies which of the existing elementIncidents should go (the dom element does not participate on the DOMAwareGroup any more)
         * 2. Identifies which elements are new and add their elementIncident on the DOMAwareGroup
         * @returns {object} - with keys additions and deletions each of which hold an array of functions that must be
         *  executed for adding the new element incidents and deleting the element incidents that do not apply any more
        */

    }, {
        key: 'flashDOM',
        value: function flashDOM() {
            var _this2 = this;

            var elements = this.context.getElements(this.props.selector);

            // deletions and additions of elementIncidents that should take place according to the new elements
            var deletions = [];
            var additions = [];

            var that = this;

            // an array that will keep all new elements' keys to be used later for identifying deletions
            var stayingElementIncidents = [];
            // first identify additions

            var _loop = function _loop(i) {
                // for each of the new elements
                var element = elements[i];
                var mcid = _this2.context.getMCID(element); // take its mcid

                if (!mcid) {
                    // if the element does not have an mcid yet that means it's a new one
                    var addition = function addition() {
                        return that._createElementIncident(element);
                    };
                    additions.push(addition);
                } else if (!_this2.elementIncidentsByMCID.hasOwnProperty(mcid)) {
                    // else if the element has an mcid that doesn't already exist on the elementIncidents
                    var _addition = function _addition() {
                        return that._createElementIncident(element);
                    };
                    additions.push(_addition);
                } else {
                    stayingElementIncidents.push(mcid);
                }
            };

            for (var i = 0; i < elements.length; i++) {
                _loop(i);
            }

            // next step is to compare the elementIncidents with the existing elements key to see which 
            // are missing from the new set and put them for delete
            var alreadyExistingElementsKeys = Object.keys(this.elementIncidentsByMCID);
            var underDeletion = alreadyExistingElementsKeys.filter(function (key) {
                return stayingElementIncidents.indexOf(key) < 0;
            });

            var _loop2 = function _loop2(i) {
                var deletion = function deletion() {
                    that.removeIncident(that.elementIncidentsByMCID[underDeletion[i]].id, { preventSlip: true });
                    delete that.elementIncidentsByMCID[that.elementIncidentsByMCID[underDeletion[i]].id];
                };
                deletions.push(deletion);
            };

            for (var i = 0; i < underDeletion.length; i++) {
                _loop2(i);
            }

            var failedAdditions = [];
            for (var i = 0; i < additions.length; i++) {
                var additionResult = additions[i]();
                if (additionResult.result === false) {
                    failedAdditions.push(additionResult);
                }
            }

            for (var _i = 0; _i < deletions.length; _i++) {
                deletions[_i]();
            }

            return {
                failedAdditions: failedAdditions

                // return {
                //     additions: additions,
                //     deletions: deletions
                // }
            };
        }
    }, {
        key: 'attributesChange',
        value: function attributesChange(newAttrs) {
            for (var i = 0; i < this.incidents; i++) {
                // TODO execute attribute change by passing down the command
            }
        }
    }, {
        key: 'exportState',
        value: function exportState() {
            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (props.hasOwnProperty('unprocessed')) {
                if (props.unprocessed === false) {
                    return _get(DOMAwareIncident.prototype.__proto__ || Object.getPrototypeOf(DOMAwareIncident.prototype), 'exportState', this).call(this, props);
                } else {
                    return this.originalIncident.exportState();
                }
            }
            return this.originalIncident.exportState();
        }
    }, {
        key: 'groupType',
        get: function get() {
            return "dom";
        }
    }]);

    return DOMAwareIncident;
}(Group);

module.exports = DOMAwareIncident;