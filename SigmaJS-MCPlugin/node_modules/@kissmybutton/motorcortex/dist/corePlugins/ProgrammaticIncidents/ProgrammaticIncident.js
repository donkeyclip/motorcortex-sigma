'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Helper = require('../../_coreUtils/Helper');
var helper = new Helper();
var Incident = require('../../_BaseClasses/Incident');

var ProgrammaticIncident = function (_Incident) {
    _inherits(ProgrammaticIncident, _Incident);

    function ProgrammaticIncident() {
        var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _classCallCheck(this, ProgrammaticIncident);

        var _this = _possibleConstructorReturn(this, (ProgrammaticIncident.__proto__ || Object.getPrototypeOf(ProgrammaticIncident)).call(this, attrs, props));

        _this.command = {
            forwards: function forwards() {},
            backwards: function backwards() {}
        };

        if (!attrs.hasOwnProperty('command')) {
            var _ret;

            helper.error('Programmatic Incidents must have the "command" included on the properties');
            return _ret = false, _possibleConstructorReturn(_this, _ret);
        } else {
            // if the user passed an object as the command
            if (helper.isObject(attrs.command)) {
                // we expect to find two functions residing on the "forwards" and "backwards" keys
                if (attrs.command.hasOwnProperty('forwards')) {
                    if (helper.isFunction(attrs.command.forwards)) {
                        _this.command.forwards = attrs.command.forwards;
                    } else {
                        var _ret2;

                        helper.error('ProgrammaticIncident\'s command.forwards key should hold a function. ' + _typeof(attrs.command.forwards) + ' passed');
                        return _ret2 = false, _possibleConstructorReturn(_this, _ret2);
                    }
                }
                if (attrs.command.hasOwnProperty('backwards')) {
                    if (helper.isFunction(attrs.command.backwards)) {
                        _this.command.backwards = attrs.command.backwards;
                    } else {
                        var _ret3;

                        helper.error('ProgrammaticIncident\'s command.backwards key should hold a function. ' + _typeof(attrs.command.backwards) + ' passed');
                        return _ret3 = false, _possibleConstructorReturn(_this, _ret3);
                    }
                }
            } else if (helper.isFunction(attrs.command)) {
                // else if the passed argument is a function we only hold this as the forwards command
                _this.command.forwards = attrs.command;
            } else {
                var _ret4;

                // else if the passed argument is neither function nor object return false
                helper.error('command key of ProgrammaticIncidents\' construction properties must be either an object or a function. ' + _typeof(attrs.command) + ' passed');
                return _ret4 = false, _possibleConstructorReturn(_this, _ret4);
            }
        }
        return _this;
    }

    _createClass(ProgrammaticIncident, [{
        key: 'onPlay',
        value: function onPlay(props) {
            if (this.speed > 0) {
                this.command.forwards(props);
            } else {
                this.command.backwards(props);
            }
        }
    }]);

    return ProgrammaticIncident;
}(Incident);

module.exports = ProgrammaticIncident;