'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Helper = require('../../../_coreUtils/Helper');
var helper = new Helper();
var conf = require('../../../configuration/generalConf');

var PlainContextHandler = function () {
    function PlainContextHandler() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, PlainContextHandler);

        if (!helper.isObject(props)) {
            helper.error('ContextHandler expects an object on its constructor. ' + (typeof props === 'undefined' ? 'undefined' : _typeof(props)) + ' passed');
            return false;
        }

        if (!props.hasOwnProperty('host')) {
            helper.error('ContextHandler expects the host key on its constructor properties which is missing');
            return false;
        }

        var ownerDocument = props.host.ownerDocument;
        var initParams = props.initParams;
        if (!props.hasOwnProperty('initParams')) {
            helper.info('ContextHandler got null initParams');
            initParams = {};
        }

        if (props.hasOwnProperty('html')) {
            props.host.innerHTML = helper.renderTemplate(props.html, { params: initParams });
        }

        if (props.hasOwnProperty('css')) {
            var styleTag = ownerDocument.createElement('style');
            styleTag.type = 'text/css';
            if (styleTag.styleSheet) {
                styleTag.styleSheet.cssText = helper.renderTemplate(props.css, { params: initParams });
            } else {
                styleTag.appendChild(ownerDocument.createTextNode(props.css));
            }
            var head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];
            head.appendChild(styleTag);
        }

        this.isDOM = true;
        this.rootElement = props.host;

        this.context = {
            document: ownerDocument,
            window: ownerDocument.defaultView,
            clipContainer: this.rootElement,
            rootElement: props.host,
            unmount: function unmount() {
                props.host.innerHTML = "";
            },
            getElements: this.getElements.bind(this),
            getMCID: this.getMCID.bind(this),
            setMCID: this.setMCID.bind(this),
            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),
            getElementByMCID: this.getElementByMCID.bind(this)
        };

        this.elementsByMCID = {};
    }

    _createClass(PlainContextHandler, [{
        key: 'getElementByMCID',
        value: function getElementByMCID(mcid) {
            if (this.elementsByMCID.hasOwnProperty(mcid)) {
                return this.elementsByMCID[mcid];
            } else {
                var element = this.context.document.querySelector(this.getElementSelectorByMCID(mcid));
                this.elementsByMCID[mcid] = element;
                return element;
            }
        }
    }, {
        key: 'getElements',
        value: function getElements(selector) {
            return Array.from(this.context.rootElement.querySelectorAll(selector));
        }
    }, {
        key: 'getMCID',
        value: function getMCID(element) {
            return element.getAttribute(conf.elements_data_attribute_name);
        }
    }, {
        key: 'setMCID',
        value: function setMCID(element, mcid) {
            element.setAttribute(conf.elements_data_attribute_name, mcid);
        }
    }, {
        key: 'getElementSelectorByMCID',
        value: function getElementSelectorByMCID(mcid) {
            return '[' + conf.elements_data_attribute_name + '="' + mcid + '"]';
        }
    }]);

    return PlainContextHandler;
}();

module.exports = PlainContextHandler;