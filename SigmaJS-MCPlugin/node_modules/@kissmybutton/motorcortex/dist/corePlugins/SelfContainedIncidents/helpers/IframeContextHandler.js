'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
iframe[seamless]{
    background-color: transparent;
    border: 0px none transparent;
    padding: 0px;
    overflow: hidden;
}

might need more work for IE. See here: https://stackoverflow.com/a/29209248
*/

var Helper = require('../../../_coreUtils/Helper');
var helper = new Helper();
var conf = require('../../../configuration/generalConf');

var IframeContextHandler = function () {
    /**
     * @param {object} props - an object that should contain all of the following keys:
     * - html (the html template to render)
     * - css (the css template of the isolated tree)
     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)
     * - host (an Element object that will host the isolated tree)
     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)
    */
    function IframeContextHandler() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, IframeContextHandler);

        if (!helper.isObject(props)) {
            helper.error('ContextHandler expects an object on its constructor. ' + (typeof props === 'undefined' ? 'undefined' : _typeof(props)) + ' passed');
            return false;
        }

        if (!props.hasOwnProperty('html')) {
            helper.error('ContextHandler expects the html key on its constructor properties which is missing');
            return false;
        }

        if (!props.hasOwnProperty('css')) {
            helper.error('ContextHandler expects the css key on its constructor properties which is missing');
            return false;
        }

        var initParams = props.initParams;
        if (!props.hasOwnProperty('initParams')) {
            helper.info('ContextHandler got null initParams');
            initParams = {};
        }

        if (!props.hasOwnProperty('host')) {
            helper.error('ContextHandler expects the host key on its constructor properties which is missing');
            return false;
        }

        this.isDOM = true;

        var ownerDocument = props.host.ownerDocument;

        if (!ownerDocument.getElementById("@kissmybutton/motorcortex/iframeContextHandler/css")) {
            var seamlessCSS = '\n            iframe[seamless]{\n                background-color: transparent;\n                border: 0px none transparent;\n                padding: 0px;\n                overflow: hidden;\n            }\n            ';
            var iframesCSS = ownerDocument.createElement('style');
            iframesCSS.id = "@kissmybutton/motorcortex/iframeContextHandler/css";
            iframesCSS.type = 'text/css';
            var Head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];
            if (iframesCSS.styleSheet) {
                iframesCSS.styleSheet.cssText = seamlessCSS;
            } else {
                iframesCSS.appendChild(ownerDocument.createTextNode(seamlessCSS));
            }

            Head.appendChild(iframesCSS);
        }

        // Create an iframe:
        var iframe = ownerDocument.createElement('iframe');
        props.host.appendChild(iframe);
        iframe.setAttribute("seamless", "seamless");
        if (props.hasOwnProperty('containerParams')) {
            if (props.containerParams.hasOwnProperty('width')) {
                iframe.setAttribute('width', props.containerParams.width);
            }
            if (props.containerParams.hasOwnProperty('height')) {
                iframe.setAttribute('height', props.containerParams.height);
            }
        }
        // Initialise the iframe
        iframe.src = '';
        // Put it in the document (but hidden):
        var iframeDocument = iframe.contentWindow || iframe.contentDocument;
        if (iframeDocument.document) {
            iframeDocument = iframeDocument.document;
        }

        iframeDocument.write(helper.renderTemplate(props.html, { params: props.initParams }));

        var bodyFixCSS = '\n        body{\n            padding:0;\n            margin:0;\n        }\n        ';

        var styleTag = iframeDocument.createElement('style');
        styleTag.type = 'text/css';
        if (styleTag.styleSheet) {
            styleTag.styleSheet.cssText = helper.renderTemplate(props.css, { params: props.initParams }) + bodyFixCSS;
        } else {
            styleTag.appendChild(ownerDocument.createTextNode(props.css + bodyFixCSS));
        }

        var head = iframeDocument.head || iframeDocument.getElementsByTagName('head')[0];
        head.appendChild(styleTag);

        if (props.hasOwnProperty('fonts')) {
            for (var i = 0; i < props.fonts.length; i++) {
                var theFont = props.fonts[i];
                if (theFont.type === "google-font") {
                    var fontTag = iframeDocument.createElement('link');
                    fontTag.setAttribute('rel', 'stylesheet');
                    fontTag.setAttribute('src', theFont.src);
                    head.appendChild(fontTag);
                }
            }
        }

        this.rootElement = iframe;

        this.context = {
            document: iframeDocument,
            window: iframe.contentWindow || iframe,
            clipContainer: iframe,
            rootElement: iframeDocument.body,
            unmount: function unmount() {
                props.host.removeChild(iframe);
            },
            getElements: this.getElements.bind(this),
            getMCID: this.getMCID.bind(this),
            setMCID: this.setMCID.bind(this),
            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),
            getElementByMCID: this.getElementByMCID.bind(this)
        };

        iframeDocument.close();

        this.elementsByMCID = {};
    }

    _createClass(IframeContextHandler, [{
        key: 'getElementByMCID',
        value: function getElementByMCID(mcid) {
            if (this.elementsByMCID.hasOwnProperty(mcid)) {
                return this.elementsByMCID[mcid];
            } else {
                var element = this.context.document.querySelector(this.getElementSelectorByMCID(mcid));
                this.elementsByMCID[mcid] = element;
                return element;
            }
        }
    }, {
        key: 'getElements',
        value: function getElements(selector) {
            return Array.from(this.context.document.querySelectorAll(selector));
        }
    }, {
        key: 'getMCID',
        value: function getMCID(element) {
            return element.getAttribute(conf.elements_data_attribute_name);
        }
    }, {
        key: 'setMCID',
        value: function setMCID(element, mcid) {
            element.setAttribute(conf.elements_data_attribute_name, mcid);
        }
    }, {
        key: 'getElementSelectorByMCID',
        value: function getElementSelectorByMCID(mcid) {
            return '[' + conf.elements_data_attribute_name + '="' + mcid + '"]';
        }
    }]);

    return IframeContextHandler;
}();

module.exports = IframeContextHandler;