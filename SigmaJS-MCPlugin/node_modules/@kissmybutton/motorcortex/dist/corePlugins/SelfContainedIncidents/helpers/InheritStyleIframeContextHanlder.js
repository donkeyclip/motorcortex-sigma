'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
iframe[seamless]{
    background-color: transparent;
    border: 0px none transparent;
    padding: 0px;
    overflow: hidden;
}

might need more work for IE. See here: https://stackoverflow.com/a/29209248
*/

var Helper = require('../../../_coreUtils/Helper');
var helper = new Helper();
var conf = require('../../../configuration/generalConf');

var IframeContextHandler = function () {
    /**
     * @param {object} props - an object that should contain all of the following keys:
     * - html (the html template to render)
     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)
     * - host (an Element object that will host the isolated tree)
    */
    function IframeContextHandler() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, IframeContextHandler);

        if (!helper.isObject(props)) {
            helper.error('ContextHandler expects an object on its constructor. ' + (typeof props === 'undefined' ? 'undefined' : _typeof(props)) + ' passed');
            return false;
        }

        if (!props.hasOwnProperty('html')) {
            helper.error('ContextHandler expects the html key on its constructor properties which is missing');
            return false;
        }

        var initParams = props.initParams;
        if (!props.hasOwnProperty('initParams')) {
            helper.info('ContextHandler got null initParams');
            initParams = {};
        }

        if (!props.hasOwnProperty('host')) {
            helper.error('ContextHandler expects the host key on its constructor properties which is missing');
            return false;
        }

        this.isDOM = true;

        var ownerDocument = props.host.ownerDocument;

        // Create an iframe:
        var iframe = ownerDocument.createElement('iframe');
        iframe.style.display = "none";
        props.host.appendChild(iframe);
        var iframeDocument = iframe.contentWindow || iframe.contentDocument;
        if (iframeDocument.document) {
            iframeDocument = iframeDocument.document;
        }
        var rootElement = void 0;

        iframe.onload = function () {
            iframe.onload = null;

            iframeDocument.write('<mc_iframe_root_element>');
            rootElement = iframeDocument.querySelector('mc_iframe_root_element');
            props.host.appendChild(rootElement);
            var html = helper.renderTemplate(props.html, { params: props.initParams });
            iframeDocument.write(html);
            iframeDocument.write('</mc_iframe_root_element>');
            iframeDocument.close();
        };

        // Initialise the iframe
        iframe.src = '';

        this.context = {
            document: iframeDocument,
            window: iframe.contentWindow || iframe,
            rootElement: rootElement,
            unmount: function unmount() {
                props.host.removeChild(iframe);
            },
            getElements: this.getElements.bind(this),
            getMCID: this.getMCID.bind(this),
            setMCID: this.setMCID.bind(this),
            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this)
        };
    }

    _createClass(IframeContextHandler, [{
        key: 'getElements',
        value: function getElements(selector) {
            return Array.from(this.context.document.querySelectorAll(selector));
        }
    }, {
        key: 'getMCID',
        value: function getMCID(element) {
            return element.getAttribute(conf.elements_data_attribute_name);
        }
    }, {
        key: 'setMCID',
        value: function setMCID(element, mcid) {
            element.setAttribute(conf.elements_data_attribute_name, mcid);
        }
    }, {
        key: 'getElementSelectorByMCID',
        value: function getElementSelectorByMCID(mcid) {
            return '[' + conf.elements_data_attribute_name + '="' + mcid + '"]';
        }
    }]);

    return IframeContextHandler;
}();

module.exports = IframeContextHandler;