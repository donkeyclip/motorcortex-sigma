'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Helper = require('../../_coreUtils/Helper');
var helper = new Helper();
var conf = require('../../configuration/generalConf');

// context handlers
var IframeContextHandler = require('./helpers/IframeContextHandler');
var PlainContextHandler = require('./helpers/PlainContextHandler');
var WebComponentContextHandler = require('./helpers/WebComponentContextHandler');

var ExtendableClip = require('./ExtendableClip');

var Clip = function (_ExtendableClip) {
    _inherits(Clip, _ExtendableClip);

    /**
     * @param {object} props - an object that should contain all of the following keys:
     * - html (the html template to render)
     * - css (the css template of the isolated tree)
     * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)
     * - host (an Element object that will host the isolated tree)
     * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)
     * - type (optional, defaults to "closed") the type of the Clip. It can be one of the:
     *  - closed (if closed then if shadow dom is supported by the browser it renders a shadow dom component else it falls back to iframe) 
     *  - plain (if plain it just uses the existing content of the host)
     *  - iframe (if iframe then it renders as an iframe component)
    */
    function Clip() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, Clip);

        var attrsToPass = void 0,
            propsToUse = void 0;

        /*
        backwards compatibility. If the user doesn't pass a second argument on the constructor then this is 
        the new way of initialising a Group (only props).
        */
        if (oldProps === null) {
            attrsToPass = {};
            propsToUse = props;
        } else {
            // else, in case the user has passed two arguments then both should be used
            attrsToPass = props;
            propsToUse = oldProps;
        }

        var clipType = conf.selfContainedContextHandler;
        if (propsToUse.hasOwnProperty("type")) {
            clipType = propsToUse.type;
        }

        if (!propsToUse.hasOwnProperty('html') && (clipType === "iframe" || clipType === "openiframe")) {
            var _ret;

            helper.error('Self Contained Incident expects the html key on its constructor properties which is missing');
            return _ret = false, _possibleConstructorReturn(_this, _ret);
        }

        if (!propsToUse.hasOwnProperty('css') && clipType === "iframe") {
            var _ret2;

            helper.error('Self Contained Incident expects the css key on its constructor properties which is missing');
            return _ret2 = false, _possibleConstructorReturn(_this, _ret2);
        }

        if (!propsToUse.hasOwnProperty('host')) {
            var _ret3;

            helper.error('Self Contained Incident expects the host key on its constructor properties which is missing');
            return _ret3 = false, _possibleConstructorReturn(_this, _ret3);
        }

        var ContextHanlder = null;
        if (clipType === 'closed') {
            if (document.head.createShadowRoot || document.head.attachShadow) {
                ContextHanlder = WebComponentContextHandler;
            } else {
                ContextHanlder = IframeContextHandler;
            }
        } else if (clipType === "plain") {
            ContextHanlder = PlainContextHandler;
        } else if (clipType === 'iframe') {
            ContextHanlder = IframeContextHandler;
        } else {
            var _ret4;

            helper.error('Clip type ' + clipType + ' is not supported');
            return _ret4 = false, _possibleConstructorReturn(_this, _ret4);
        }

        var contextHanlder = new ContextHanlder(propsToUse);

        var _this = _possibleConstructorReturn(this, (Clip.__proto__ || Object.getPrototypeOf(Clip)).call(this, attrsToPass, propsToUse));

        _this.ownContext = contextHanlder.context;
        _this.iframe = contextHanlder.iframeElement;

        _this.forceExportIncidents = true;
        return _this;
    }

    _createClass(Clip, [{
        key: 'renderHTML',
        value: function renderHTML() {}
    }, {
        key: 'renderCSS',
        value: function renderCSS() {}
    }, {
        key: 'ready',
        value: function ready() {
            this.stop();
            this.setCurrentMillisecond(0);
            this.recalcState(0);
            this.restore();
        }
    }, {
        key: 'rootElement',
        get: function get() {
            return this.ownContext.clipContainer;
        }
    }]);

    return Clip;
}(ExtendableClip);

module.exports = Clip;