'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Clip = require('../_baseClasses/Clip.js');
var HTMLChannel = require('./Channels/HTMLChannel.js');
var Animation = require('./Incidents/Animation.js');
var HTMLScene = require('./Incidents/HTMLScene.js');
var Incident = require('../_baseClasses/Incident.js');
var Scene = require('../_baseClasse/Group.js');
var TimedIncident = require('../_baseClasse/TimedIncident.js');
var VideoChannel = require('./Channels/VideoChannel.js');
var VideoCommand = require('./mediaIncidents/VideoCommand.js');
var AudioChannel = require('./Channels/AudioChannel.js');
var AudioCommand = require('./mediaIncidents/AudioCommand.js');
var TypeWritingPlugin = require('./Plugins/TypeWritting.js');
var NullIncident = require('./Incidents/DummyIncident.js');

var IO = function () {
    function IO() {
        _classCallCheck(this, IO);
    }

    _createClass(IO, [{
        key: 'export',
        value: function _export(incident) {
            return incident.exportState();
        }
    }, {
        key: 'import',
        value: function _import(definition) {
            return this.createInstance(definition);
        }
    }, {
        key: 'addChildren',
        value: function addChildren(parent, incidents) {
            for (var i = 0; i < incidents.length; i++) {
                var inc = this.createInstance(incidents[i].incident);
                parent.addIncident(inc, incidents[i].millisecond);
            }
        }
    }, {
        key: 'createInstance',
        value: function createInstance(definition) {
            var incident = void 0;
            switch (definition.type) {
                case 'clip':
                    incident = new Clip({ id: definition.id });
                    this.addChildren(incident, definition.incidents);
                    incident.setParams(definition.customParams);
                    return incident;
                case 'incident':
                    incident = new Incident({ id: definition.id });
                    incident.setParams(definition.customParams);
                    return incident;
                case 'timed-incident':
                    incident = new TimedIncident({ id: definition.id });
                    incident.setParams(definition.customParams);
                    return incident;
                case 'scene':
                    incident = new Scene({ id: definition.id });
                    this.addChildren(incident, definition.incidents);
                    incident.setParams(definition.customParams);
                    return incident;
                case 'html-channel':
                    incident = new HTMLChannel({ id: definition.id });
                    this.addChildren(incident, definition.incidents);
                    incident.setParams(definition.customParams);
                    return incident;
                case 'html-scene':
                    incident = new HTMLScene({ id: definition.id });
                    this.addChildren(incident, definition.incidents);
                    incident.setParams(definition.customParams);
                    return incident;
                case 'animation':
                    incident = new Animation({
                        selector: definition.selector,
                        attributes: definition.attributes,
                        properties: definition.properties
                    }, { id: definition.id });
                    incident.setParams(definition.customParams);
                    return incident;
                case 'video-channel':
                    incident = new VideoChannel({ id: definition.id });
                    incident.setParams(definition.customParams);
                    return incident;
                case 'video-command':
                    incident = new VideoCommand(definition.mediaCommandType, { id: definition.id, second: definition.second, volume: definition.volume });
                    incident.setParams(definition.customParams);
                    return incident;
                case 'typewritter-plugin':
                    incident = new TypeWritingPlugin(definition.constructionProps);
                    incident.setParams(definition.customParams);
                    return incident;
                case 'null-incident':
                    incident = new NullIncident({ id: definition.id });
                    incident.setParams(definition.customParams);
                    return incident;
            }
        }
    }]);

    return IO;
}();

;

module.exports = IO;