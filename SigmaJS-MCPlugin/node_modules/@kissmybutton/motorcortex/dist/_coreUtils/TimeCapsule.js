'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Helper = require('../_coreUtils/Helper');
var helper = new Helper();

var Journey = function () {
    function Journey(props) {
        _classCallCheck(this, Journey);

        if (!props.hasOwnProperty('incident')) {
            helper.error('Journey constructor expects an Incident on its properties on the key "incident"');
            return false;
        }

        this.memory = props.calpuleMemory;
        this.stations = [];

        this.incident = props.incident;
        this.startMillisecond = this.incident.runTimeInfo.currentMillisecond * 1;
        this.startState = this.incident.state + "";
        this.incident.stop();
    }

    _createClass(Journey, [{
        key: 'station',
        value: function station(millisecond) {
            var props = {};
            if (this.stations.length > 0) {
                props.previousStop = this.stations[this.stations.length - 1];
            }
            this.stations.push(millisecond);
            // helper.log(`CAPSULE passes as previousStop: ${props.previousStop}`);
            // helper.log(this.stations);
            this.incident.goTo(millisecond, props);
        }
    }, {
        key: 'destination',
        value: function destination() {
            var millisecond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (millisecond != null) {
                this.station(millisecond);
            } else {
                millisecond = this.stations[this.stations.length - 1];
            }
            this.incident.beOn(millisecond, false);
            if (this.startState === 'playing' || this.startState === 'blocked') {
                this.incident.resume();
            }
            this.memory.push(this.exportJourneyLog);
        }
    }, {
        key: 'exportJourneyLog',
        value: function exportJourneyLog() {
            return {
                startMillisecond: this.startMillisecond,
                startState: this.startState,
                incident: this.incident.exportState(),
                stations: this.stations
            };
        }
    }]);

    return Journey;
}();

var TimeCapsule = function () {
    function TimeCapsule() {
        _classCallCheck(this, TimeCapsule);

        this.memory = [];
    }

    _createClass(TimeCapsule, [{
        key: 'startJourney',
        value: function startJourney(incident) {
            if (!incident) {
                helper.error('startJourney expects an Incident as an argument');
                return false;
            }

            return new Journey({ incident: incident, calpuleMemory: this.memory });
        }
    }]);

    return TimeCapsule;
}();

module.exports = TimeCapsule;