const Helper = require('../../_coreUtils/Helper');
const helper = new Helper();
const Incident = require('../../_BaseClasses/Incident');

class ProgrammaticIncident extends Incident {
    constructor(attrs={}, props = {}) {
        super(attrs, props);
        
        this.command = {
            forwards: function(){},
            backwards: function(){}
        }
        
        if(!attrs.hasOwnProperty('command')){
            helper.error('Programmatic Incidents must have the "command" included on the properties');
            return false;
        } else {
            // if the user passed an object as the command
            if(helper.isObject(attrs.command)){
                // we expect to find two functions residing on the "forwards" and "backwards" keys
                if(attrs.command.hasOwnProperty('forwards')){
                   if(helper.isFunction(attrs.command.forwards)){
                       this.command.forwards = attrs.command.forwards;
                   } else {
                       helper.error(`ProgrammaticIncident's command.forwards key should hold a function. ${typeof attrs.command.forwards} passed`);
                       return false;
                   }
                } 
                if(attrs.command.hasOwnProperty('backwards')){
                   if(helper.isFunction(attrs.command.backwards)){
                       this.command.backwards = attrs.command.backwards;
                   } else {
                       helper.error(`ProgrammaticIncident's command.backwards key should hold a function. ${typeof attrs.command.backwards} passed`);
                       return false;
                   }
                } 
            } else if(helper.isFunction(attrs.command)){ // else if the passed argument is a function we only hold this as the forwards command
                this.command.forwards = attrs.command;
            } else { // else if the passed argument is neither function nor object return false
                helper.error(`command key of ProgrammaticIncidents' construction properties must be either an object or a function. ${typeof attrs.command} passed`);
                return false;
            }
        }
    }
    
    onPlay(props){
        if(this.speed > 0){
            this.command.forwards(props);   
        } else {
            this.command.backwards(props);
        }
    }
}

module.exports = ProgrammaticIncident;