const Helper = require('../../../_coreUtils/Helper');
const helper = new Helper();
const conf = require('../../../configuration/generalConf');

class PlainContextHandler {
    
    constructor(props={}) {
        if(!helper.isObject(props)){
            helper.error(`ContextHandler expects an object on its constructor. ${typeof props} passed`);
            return false;
        }

        if(!props.hasOwnProperty('host')){
            helper.error(`ContextHandler expects the host key on its constructor properties which is missing`);
            return false;
        }
        
        const ownerDocument = props.host.ownerDocument;
        let initParams = props.initParams;
        if(!props.hasOwnProperty('initParams')){
            helper.info(`ContextHandler got null initParams`);
            initParams = {};
        }
        
        if(props.hasOwnProperty('html')){
            props.host.innerHTML = helper.renderTemplate(props.html, {params:initParams})
        }

        if(props.hasOwnProperty('css')){
            const styleTag = ownerDocument.createElement('style');
            styleTag.type = 'text/css';
            if (styleTag.styleSheet){
                styleTag.styleSheet.cssText = helper.renderTemplate(props.css, {params:initParams});
            } else {
                styleTag.appendChild(ownerDocument.createTextNode(props.css));
            }
            const head = ownerDocument.head || ownerDocument.getElementsByTagName('head')[0];
            head.appendChild(styleTag);
        }

        this.isDOM = true;
        this.rootElement = props.host;

        this.context = {
            document: ownerDocument,
            window: ownerDocument.defaultView,
            clipContainer: this.rootElement,
            rootElement: props.host,
            unmount: function(){
                props.host.innerHTML = "";
            },
            getElements: this.getElements.bind(this),
            getMCID: this.getMCID.bind(this),
            setMCID: this.setMCID.bind(this),
            getElementSelectorByMCID: this.getElementSelectorByMCID.bind(this),
            getElementByMCID: this.getElementByMCID.bind(this)
        };
        
        this.elementsByMCID = {};
    }
    
    getElementByMCID(mcid){
        if(this.elementsByMCID.hasOwnProperty(mcid)){
            return this.elementsByMCID[mcid];
        } else {
            const element = this.context.document.querySelector(this.getElementSelectorByMCID(mcid));
            this.elementsByMCID[mcid] = element;
            return element;
        }
    }
    
    getElements(selector){
        return Array.from(this.context.rootElement.querySelectorAll(selector));
    }
    
    getMCID(element){
        return element.getAttribute(conf.elements_data_attribute_name);
    }
    
    setMCID(element, mcid){
        element.setAttribute(conf.elements_data_attribute_name, mcid);
    }
    
    getElementSelectorByMCID(mcid){
        return '[' + conf.elements_data_attribute_name + '="' + mcid + '"]';
    }

}

module.exports = PlainContextHandler;
